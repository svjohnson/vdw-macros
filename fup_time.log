1                                        The SAS System      14:29 Wednesday, September 21, 2005

NOTE: Copyright (c) 2002-2003 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) 9.1 (TS1M3)
      Licensed to GROUP HEALTH COOPERATIVE OF PUGET SOUND, Site 0009688001.
NOTE: This session is executing on the XP_PRO  platform.



NOTE: This installation is running SAS/STAT hot fix bundle SAS 9.1.3 Service Pack 2.

NOTE: SAS initialization used:
      real time           13.39 seconds
      cpu time            1.53 seconds
      
1          %macro GetFollowUpTime(People    /* Dset of MRNs */
2                         , IndexDate       /* Name of a date var in &People, or else a date
2        ! literal, marking the start of the follow-up period. */
3                         , EndDate         /* Name of a date var in &Poeple, or else a complete
3        !  date literal, marking the end of the period of interest. */
4                         , GapTolerance    /* Number of months disenrollment to ignore in
4        ! deciding the disenrollment date. */
5                         , CallEndDateVar  /* What name should we give the date var that will
5        ! hold the end of the f/up period? */
6                         , OutSet          /* The name of the output dataset */
7                           ) ;
8          
9          
10         
11            %put ;
12            %put ;
13            %put ============================================================== ;
14            %put ;
15            %put Macro GetFollowUpTime V.02: ;
16            %put ;
17            %put Creating a dset "&OutSet", which will look just like "&People" except that ;
18            %put it will have an additional variable "&CallEndDateVar", which will hold the
18       ! earliest of ;
19            %put date-of-last-enrollment, or &EndDate. ;
20            %put ;
21            %put THIS IS BETA SOFTWARE--PLEASE TEST THE RESULTS! ;
22            %put ;
23            %put ============================================================== ;
24            %put ;
25            %put ;
26         
27            %let debuglib = out. ;
28            %*let debuglib = ;
29         
30            libname __enroll "&_EnrollLib" access = readonly ;
31         
32            proc sql feedback ;
33         
34               %* Grab ENROLL recs for our ppl of interest, between &IndexDate and EndDate. ;
35               %* This semi-redundant WHERE clause is b/c I want to be able to use an index on
2                                        The SAS System      14:29 Wednesday, September 21, 2005

35       !  ;
36               %* enr_year if there is one. ;
37               create table &debuglib._grist as
38               select distinct e.MRN
39                     , &IndexDate                  as idate       format = mmddyy10.
40                     , &EndDate                    as edate       format = mmddyy10.
41                     , mdy(enr_month, 1, enr_year) as EnrollDate  format = mmddyy10.
42               from __enroll.&_EnrollData as e INNER JOIN
43                     &People as p
44               on    e.MRN = p.MRN
45               where e.enr_year between year(&IndexDate) and year(&EndDate) AND
46                     CALCULATED EnrollDate between &IndexDate and &EndDate ;
47            quit ;
48         
49            * Who has a gap longer than the tolerance? ;
50            proc sort data = &debuglib._grist ;
51               by MRN EnrollDate ;
52            run ;
53         
54            data &debuglib._gap_ends ;
55               retain _LastDate . ;
56               set &debuglib._grist ;
57               by MRN EnrollDate ;
58         
59               format _LastDate mmddyy10. ;
60               * For *most* recs we want to eval the difference between this recs EnrollDate,
60       ! and the one on the last rec. ;
61               * We always expect a 1-month gap, so we subtract out the expected gap. ;
62               ThisGap = intck("MONTH", _LastDate, EnrollDate) - 1 ;
63               EndGap = 0 ;
64         
65               * Two rec types are special--firsts and lasts w/in an MRN group. ;
66               select ;
67                  * For first MRN recs, the gap we need to eval is the one from the ;
68                  * start of the period of interest to the current EnrollDate--so redefine
68       ! ThisGap. ;
69                  when (first.MRN) ThisGap = intck("MONTH", IDate, EnrollDate) ;
70                  * For last MRN recs, we have an additional gap to consider--the one between
70       ! ;
71                  * EnrollDate and the end of the period of interest.  So redefine EndGap. ;
72                  when (last.MRN)  EndGap = intck("MONTH", EnrollDate, EDate) ;
73                  otherwise ; * Do nothing! ;
74               end ;
75         
76               * Ignore the smaller of the two gaps. ;
77               ThisGap = max(ThisGap, EndGap) ;
78         
79               if ThisGap gt (&GapTolerance) then output ;
80         
81               _LastDate = EnrollDate ;
82            run ;
83         
84         
3                                        The SAS System      14:29 Wednesday, September 21, 2005

85            proc sql ;
86               * Dset _gap_ends contains MRN/EDate combos for the *ends* of all impermissible
86       ! gaps.  Find each persons first such gap. ;
87               create table &debuglib._first_gaps as
88               select MRN, min(EnrollDate) as EndFirstGap format = mmddyy10.
89               from &debuglib._gap_ends
90               group by MRN
91               ;
92         
93               * Remove any recs from grist that are on or after each persons first
93       ! impermissible gap. ;
94               create table &debuglib._clean_grist as
95               select g.*
96               from  &debuglib._grist as g LEFT JOIN
97                     &debuglib._first_gaps as f
98               on    g.MRN = f.MRN
99               where f.MRN IS NULL OR
100                    g.EnrollDate lt f.EndFirstGap
101              ;
102        
103              * drop table &debuglib._grist ;
104        
105             * Now find each persons last enrollment date. ;
106              create table &debuglib._last_enroll_dates as
107              select MRN, max(EnrollDate) as LastEnrollDate format = mmddyy10.
108              from &debuglib._clean_grist
109              group by MRN
110              ;
111        
112              %* Finally, write the new var to &People. ;
113              create table &OutSet as
114              select p.*
115                   ,  min(&EndDate, LastEnrollDate) as &CallEndDateVar format = mmddyy10.
116              from &People as p LEFT JOIN
117                    &debuglib._last_enroll_dates as l
118              on    p.MRN = l.MRN
119              ;
120        
121              * drop table &debuglib._clean_grist ;
122              * drop table &debuglib._first_gaps ;
123           quit ;
124        
125           libname __enroll clear ;
126        %mend GetFollowUpTime ;

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           16.42 seconds
      cpu time            2.03 seconds
      
