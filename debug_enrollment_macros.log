1                                                          The SAS System                               19:47 Friday, April 16, 2010

NOTE: Copyright (c) 2002-2008 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.2 (TS1M0) 
      Licensed to GROUP HEALTH COOPERATIVE OF PUGET SOUND, Site 70007081.
NOTE: This session is executing on the XP_PRO  platform.



NOTE: SAS initialization used:
      real time           13.18 seconds
      cpu time            1.09 seconds
      
1          /*********************************************
2          * Roy Pardee
3          * Center For Health Studies
4          * (206) 287-2078
5          * pardee.r@ghc.org
6          *
7          * \\groups\data\CTRHS\Crn\S D R C\VDW\Macros\debug_enrollment_macros.sas
8          *
9          * Kay Theis found discrepancies between %SimpleContinuous and %GetFollowUpTime.
10         * This program helped me to find and fix them.
11         *
12         * This program should be run as a check any time either macro is altered.
13         *
14         *********************************************/
15         
16         /* This is managed in the login script so that it doesnt
17            actually try to login when the machine is not connected
18            to the network */
19         %include "\\home\pardre1\SAS\Scripts\remoteactivate.sas" ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.49 seconds
      cpu time            0.01 seconds
      

NOTE: Remote signon to CHSDWSAS commencing (SAS Release 9.02.01M0P020508).
NOTE: Script file 'tcpwin.scr' entered.
NOTE: Logged onto Windows... Starting remote SAS now.
NOTE: SAS/CONNECT conversation established.
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2008 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.2 (TS1M0) 
      Licensed to GROUP HEALTH COOPERATIVE OF PUGET SOUND, Site 70007082.
NOTE: This session is executing on the NET_SRV  platform.



NOTE: SAS initialization used:
      real time           1.15 seconds
      cpu time            0.21 seconds
      
NOTE: Remote signon to CHSDWSAS complete.
2                                                          The SAS System                               19:48 Friday, April 16, 2010

NOTE: Remote submit to CHSDWSAS commencing.
1    %make_spm_comment(&CurrFile)

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The file _COMMENT is:
      Filename=\\ctrhs-sas\scratch\_TD2792\spm_comment.txt,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=16Apr2010:19:48:35,
      Create Time=16Apr2010:19:48:35

NOTE: 1 record was written to the file _COMMENT.
      The minimum record length was 70.
      The maximum record length was 70.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

2    
3    ***********************;
4    * Set the typical libnames... ;
5    %let DWROOT = \\ctrhs-sas\warehouse\SasData\ ;
6    libname consumer  "&DWROOT.Consumer" ;
NOTE: Libref CONSUMER was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Consumer
7    libname chsid     "&DWROOT.CHSID" ;
NOTE: Libref CHSID was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\CHSID
8    libname demogs    "&DWROOT.Consumer Demographics" ;
NOTE: Libref DEMOGS was successfully assigned as follows: 
      Engine:        V9 
3                                                          The SAS System                               19:48 Friday, April 16, 2010

      Physical Name: \\ctrhs-sas\warehouse\SasData\Consumer Demographics
9    libname enroll    "&DWROOT.Enrollment" ;
NOTE: Libref ENROLL was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Enrollment
10   libname nac       "&DWROOT.Cancer\Naaccr" ;
NOTE: Libref NAC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Cancer\Naaccr
11   libname naaccr    "&DWROOT.Cancer\Naaccr" ;
NOTE: Libname NAACCR refers to the same physical library as NAC.
NOTE: Libref NAACCR was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Cancer\Naaccr
12   libname baseline  "&DWROOT.Baseline" ;
NOTE: Libref BASELINE was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Baseline
13   libname arpa      "&DWROOT.arpa" ;
NOTE: Libref ARPA was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\arpa
14   libname mbhist    "&DWROOT.mbhist" ;
NOTE: Libref MBHIST was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\mbhist
15   libname mbcurr    "&DWROOT.mbcurr" ;
NOTE: Libref MBCURR was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\mbcurr
16   libname claims    "&DWROOT.claims" ;
NOTE: Libref CLAIMS was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\claims
17   libname death     "&DWROOT.death" ;
NOTE: Libref DEATH was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\death
18   libname hosp      "&DWROOT.Hospital" ;
NOTE: Libref HOSP was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Hospital
19   libname VDW       "&DWROOT.CRN_VDW" ;
NOTE: Libref VDW was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\CRN_VDW
20   libname hosps     "&DWROOT.hospital" ;
NOTE: Libname HOSPS refers to the same physical library as HOSP.
NOTE: Libref HOSPS was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\Hospital
21   libname rx        "&DWROOT.rx" ;
NOTE: Libref RX was successfully assigned as follows: 
4                                                          The SAS System                               19:48 Friday, April 16, 2010

      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\rx
22   libname lab       "&DWROOT.lab" ;
NOTE: Libref LAB was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\lab
23   libname cmd       "&DWROOT.cmd" ;
NOTE: Libref CMD was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\cmd
24   libname s         "\\ctrhs-sas\sasuser\pardre1" ;
NOTE: Libref S was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\sasuser\pardre1
25   
26   footnote "Program file: &CurrFile " ;
27   
28   
29   options linesize = 150 nocenter msglevel = i NOOVP formchar='|-++++++++++=|-/|<>*' dsoptions="note2err" NOSQLREMERGE ;
30   
31   libname s '\\ctrhs-sas\sasuser\pardre1\debug_enrollment' ;
NOTE: Libref S was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\sasuser\pardre1\debug_enrollment
32   
33   data main ;
34     set s.roy(keep = mrn) ;
35   run ;

NOTE: There were 9285 observations read from the data set S.ROY.
NOTE: The data set WORK.MAIN has 9285 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
      

36   
37   %include "\\groups\data\CTRHS\Crn\S D R C\VDW\Macros\StdVars.sas" ;
NOTE: Libname __VDW refers to the same physical library as VDW.
NOTE: Libref __VDW was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\CRN_VDW
134  
135  %include "\\groups\data\CTRHS\Crn\S D R C\VDW\Macros\standard_macros.sas" ;
4673  
4674  run ;
4675  
4676  %**let my_start_date = 01Oct2006 ;
4677  %let my_start_date = 01jan2007 ;
4678  %let my_end_date = 31Dec2008 ;
4679  
4680  ** try 01jan2007 as an index/start ;
4681  
5                                                          The SAS System                               19:48 Friday, April 16, 2010

4682  options mprint mlogic ;
4683  
4684  %SimpleContinuous(
MLOGIC(SIMPLECONTINUOUS):  Beginning execution.
4685                   People=main
4686                  , StartDt = &my_start_date
4687                  , Enddt = &my_end_date
4688                  , DaysTol = 90
4689                  , outset = s.enrollment
4690                  );
MLOGIC(SIMPLECONTINUOUS):  Parameter PEOPLE has value main
MLOGIC(SIMPLECONTINUOUS):  Parameter STARTDT has value 01jan2007
MLOGIC(SIMPLECONTINUOUS):  Parameter ENDDT has value 31Dec2008
MLOGIC(SIMPLECONTINUOUS):  Parameter DAYSTOL has value 90
MLOGIC(SIMPLECONTINUOUS):  Parameter OUTSET has value s.enrollment
MLOGIC(SIMPLECONTINUOUS):  Parameter ENROLLDSET has value &_vdw_enroll
MPRINT(SIMPLECONTINUOUS):   proc sql noprint ;
MPRINT(SIMPLECONTINUOUS):   ** How many days long is the period of interest? ;
MPRINT(SIMPLECONTINUOUS):   create table dual (x char(1)) ;
NOTE: Table WORK.DUAL created, with 0 rows and 1 columns.
MPRINT(SIMPLECONTINUOUS):   insert into dual(x) values ('x') ;
NOTE: 1 row was inserted into WORK.DUAL.

MPRINT(SIMPLECONTINUOUS):   select ("31Dec2008"d - "01jan2007"d + 1) as TotDays , intnx('day', "01jan2007"d, -90, 'same') as 
earliest_start format = 
date9. , intnx('day', "31Dec2008"d , 90, 'same') as latest_end format = date9. into :TotDays, :EarliestStart, :LatestEnd from dual ;
MPRINT(SIMPLECONTINUOUS):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
      

MLOGIC(SIMPLECONTINUOUS):  %PUT 

MLOGIC(SIMPLECONTINUOUS):  %PUT 

MLOGIC(SIMPLECONTINUOUS):  %PUT SimpleContinuous macro--pulling continuous enrollment information for the MRNs in &People
SimpleContinuous macro--pulling continuous enrollment information for the MRNs in main
MLOGIC(SIMPLECONTINUOUS):  %PUT between &StartDt and &EndDt (&TotDays days total).
between 01jan2007 and 31Dec2008 (     731 days total).
MLOGIC(SIMPLECONTINUOUS):  %PUT 

MLOGIC(SIMPLECONTINUOUS):  %PUT 

MPRINT(SIMPLECONTINUOUS):   proc sql ;
MPRINT(SIMPLECONTINUOUS):   ** Uniquify the list of MRNs, just in case ;
MPRINT(SIMPLECONTINUOUS):   create table _ids as select distinct MRN from main ;
NOTE: Table WORK._IDS created, with 9285 rows and 1 columns.

MPRINT(SIMPLECONTINUOUS):   ** Gather start/end dates from enrlseed that could possibly cover the period of interest. ;
MPRINT(SIMPLECONTINUOUS):   ** We no longer look out past the POI--now we just manually correct gaps at the beginning and end of 
the POI. ;
MPRINT(SIMPLECONTINUOUS):   create table _periods as select e.MRN , e.enr_start , e.enr_end from __vdw.enroll2 as e INNER JOIN _ids 
6                                                          The SAS System                               19:48 Friday, April 16, 2010

as i on e.MRN = 
i.MRN where "01jan2007"d le e.enr_end AND "31Dec2008"d ge e.enr_start ;
NOTE: Table WORK._PERIODS created, with 13974 rows and 3 columns.

MPRINT(SIMPLECONTINUOUS):   ** Collapse any contiguous periods of enrollment. ;
MLOGIC(COLLAPSEPERIODS):  Beginning execution.
MLOGIC(COLLAPSEPERIODS):  Parameter LIB has value work
MLOGIC(COLLAPSEPERIODS):  Parameter DSET has value _periods
MLOGIC(COLLAPSEPERIODS):  Parameter RECSTART has value enr_start
MLOGIC(COLLAPSEPERIODS):  Parameter RECEND has value enr_end
MLOGIC(COLLAPSEPERIODS):  Parameter PERSONID has value MRN
MLOGIC(COLLAPSEPERIODS):  Parameter DAYSTOL has value 90
MLOGIC(COLLAPSEPERIODS):  Parameter DEBUG has value 0
MLOGIC(GETVARLIST):  Beginning execution.
MLOGIC(GETVARLIST):  Parameter DSET has value work._periods
MLOGIC(GETVARLIST):  Parameter RECSTART has value enr_start
MLOGIC(GETVARLIST):  Parameter RECEND has value enr_end
MLOGIC(GETVARLIST):  Parameter PERSONID has value MRN
MLOGIC(GETVARLIST):  %GLOBAL  VARLIST 
MLOGIC(GETVARLIST):  %IF condition %index(&Dset, .) = 0 is FALSE
MPRINT(GETVARLIST):   ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           36.12 seconds
      cpu time            5.15 seconds
      

MPRINT(GETVARLIST):   proc sql noprint ;
MPRINT(GETVARLIST):   * describe table dictionary.columns ;
MPRINT(GETVARLIST):   select name into :VarList separated by ' ' from dictionary.columns where memtype ne 'VIEW' AND 
upcase(compress(libname || '.' 
|| memname)) = "WORK._PERIODS" AND upcase(name) not in ("ENR_START", "ENR_END") ;
MPRINT(GETVARLIST):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           47.87 seconds
      cpu time            3.20 seconds
      

MLOGIC(GETVARLIST):  Ending execution.
MPRINT(COLLAPSEPERIODS):   ;
MLOGIC(COLLAPSEPERIODS):  %PUT VarList is &VarList
VarList is mrn
MLOGIC(COLLAPSEPERIODS):  %PUT Length of varlist is %length(&varlist)
Length of varlist is 3
MLOGIC(COLLAPSEPERIODS):  %IF condition %length(&varlist) = 0 is FALSE
MLOGIC(COLLAPSEPERIODS):  %LET (variable name is LASTVAR)
MLOGIC(LASTWORD):  Beginning execution.
MLOGIC(LASTWORD):  Parameter WORDLIST has value mrn
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  %DO %UNTIL(&ThisWord =) loop beginning.
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  %LET (variable name is THISWORD)
MLOGIC(LASTWORD):  %DO %UNTIL(&ThisWord =) condition is FALSE; loop will iterate again.
MLOGIC(LASTWORD):  %LET (variable name is I)
7                                                          The SAS System                               19:48 Friday, April 16, 2010

MLOGIC(LASTWORD):  %LET (variable name is THISWORD)
MLOGIC(LASTWORD):  %DO %UNTIL() condition is TRUE; loop will not iterate again.
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  Ending execution.
MPRINT(COLLAPSEPERIODS):   proc sort nodupkey data = work._periods ;
MPRINT(COLLAPSEPERIODS):   by MRN enr_start mrn enr_end ;
MPRINT(COLLAPSEPERIODS):   run ;

NOTE: There were 13974 observations read from the data set WORK._PERIODS.
NOTE: Duplicate BY variable(s) specified. Duplicates will be ignored.
NOTE: SAS sort was used.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._PERIODS has 13974 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
      

MPRINT(COLLAPSEPERIODS):   data work._periods ;
MPRINT(COLLAPSEPERIODS):   retain PeriodStart PeriodEnd ;
MPRINT(COLLAPSEPERIODS):   format PeriodStart PeriodEnd mmddyy10. ;
MPRINT(COLLAPSEPERIODS):   set work._periods(rename = (enr_start = _enr_start enr_end = _enr_end)) ;
MPRINT(COLLAPSEPERIODS):   by MRN mrn NOTSORTED ;
MPRINT(COLLAPSEPERIODS):   if first.mrn then do ;
MPRINT(COLLAPSEPERIODS):   * Start of a new period--initialize. ;
MPRINT(COLLAPSEPERIODS):   PeriodStart = _enr_start ;
MPRINT(COLLAPSEPERIODS):   PeriodEnd = _enr_end ;
MLOGIC(COLLAPSEPERIODS):  %IF condition &Debug = 1 is FALSE
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   * else do ;
MPRINT(COLLAPSEPERIODS):   * if (PeriodStart <= _&RecStart <= PeriodEnd + 1) then do ;
MPRINT(COLLAPSEPERIODS):   if (PeriodStart <= _enr_start <= (PeriodEnd + 90)) then do ;
MPRINT(COLLAPSEPERIODS):   * Extend the period end out to whichever is longer--the period or the record. ;
MPRINT(COLLAPSEPERIODS):   PeriodEnd = max(_enr_end, PeriodEnd) ;
MLOGIC(COLLAPSEPERIODS):  %IF condition &Debug = 1 is FALSE
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   else do ;
MPRINT(COLLAPSEPERIODS):   * We are in a new period--output the last rec & reinitialize. ;
MPRINT(COLLAPSEPERIODS):   output ;
MPRINT(COLLAPSEPERIODS):   PeriodStart = _enr_start ;
MPRINT(COLLAPSEPERIODS):   PeriodEnd = _enr_end ;
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   * end ;
MPRINT(COLLAPSEPERIODS):   if last.mrn then do ;
MLOGIC(COLLAPSEPERIODS):  %IF condition &Debug = 1 is FALSE
MPRINT(COLLAPSEPERIODS):   output ;
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   run ;

NOTE: There were 13974 observations read from the data set WORK._PERIODS.
NOTE: The data set WORK._PERIODS has 9183 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
8                                                          The SAS System                               19:48 Friday, April 16, 2010

      cpu time            0.03 seconds
      

MPRINT(COLLAPSEPERIODS):   * Now we have the actual start/stop dates in PeriodStart & PeriodEnd--rename those to ;
MPRINT(COLLAPSEPERIODS):   * the original record start/stop variable names, and strip out any wacky recs where start comes after 
end ;
MPRINT(COLLAPSEPERIODS):   data work._periods ;
MPRINT(COLLAPSEPERIODS):   set work._periods(rename = (PeriodStart = enr_start PeriodEnd = enr_end)) ;
MPRINT(COLLAPSEPERIODS):   * if PeriodStart le PeriodEnd ;
MPRINT(COLLAPSEPERIODS):   drop _enr_start _enr_end ;
MPRINT(COLLAPSEPERIODS):   run ;

NOTE: There were 9183 observations read from the data set WORK._PERIODS.
NOTE: The data set WORK._PERIODS has 9183 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MLOGIC(COLLAPSEPERIODS):  Ending execution.
MPRINT(SIMPLECONTINUOUS):   ;
MPRINT(SIMPLECONTINUOUS):   ** Now we worry about pre- and post-POI gaps. ;
MPRINT(SIMPLECONTINUOUS):   proc sort data = _periods ;
MPRINT(SIMPLECONTINUOUS):   by mrn enr_start ;
MPRINT(SIMPLECONTINUOUS):   run ;

NOTE: There were 9183 observations read from the data set WORK._PERIODS.
NOTE: SAS sort was used.
NOTE: The data set WORK._PERIODS has 9183 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      

MPRINT(SIMPLECONTINUOUS):   data _periods ;
MPRINT(SIMPLECONTINUOUS):   set _periods ;
MPRINT(SIMPLECONTINUOUS):   by mrn enr_start ;
MPRINT(SIMPLECONTINUOUS):   if first.mrn then do ;
MPRINT(SIMPLECONTINUOUS):   ** If enr_start is within &daystol days after &StartDt, we move enr_start to &StartDt (thereby closing 
the gap). ;
MPRINT(SIMPLECONTINUOUS):   x = (enr_start - "01jan2007"d) ;
MPRINT(SIMPLECONTINUOUS):   if 1 le (enr_start - "01jan2007"d) le 90 then do ;
MPRINT(SIMPLECONTINUOUS):   ** put 'Correcting enr_start for ' mrn= ;
MPRINT(SIMPLECONTINUOUS):   enr_start = "01jan2007"d ;
MPRINT(SIMPLECONTINUOUS):   end ;
MPRINT(SIMPLECONTINUOUS):   else do ;
MPRINT(SIMPLECONTINUOUS):   ** put 'No need to correct enr_start for ' mrn= enr_start= 'diff is ' x ;
MPRINT(SIMPLECONTINUOUS):   end ;
MPRINT(SIMPLECONTINUOUS):   end ;
MPRINT(SIMPLECONTINUOUS):   if last.mrn then do ;
MPRINT(SIMPLECONTINUOUS):   ** If enr_end is within &daystol days before &EndDt, we move enr_end to &EndDt ;
MPRINT(SIMPLECONTINUOUS):   if 1 le ("31Dec2008"d - enr_end) le 90 then do ;
MPRINT(SIMPLECONTINUOUS):   ** put 'Correcting enr_end for ' mrn= ;
9                                                          The SAS System                               19:48 Friday, April 16, 2010

MPRINT(SIMPLECONTINUOUS):   enr_end = "31Dec2008"d ;
MPRINT(SIMPLECONTINUOUS):   end ;
MPRINT(SIMPLECONTINUOUS):   end ;
MPRINT(SIMPLECONTINUOUS):   run ;

NOTE: There were 9183 observations read from the data set WORK._PERIODS.
NOTE: The data set WORK._PERIODS has 9183 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      

MPRINT(SIMPLECONTINUOUS):   ** Calculate # of days between start & end date. ;
MPRINT(SIMPLECONTINUOUS):   proc sql ;
MPRINT(SIMPLECONTINUOUS):   create table _period_days as select MRN , (min("31Dec2008"d, enr_end) - max("01jan2007"d, enr_start) + 
1) as Days from 
_periods where CALCULATED days > 0 ;
NOTE: Table WORK._PERIOD_DAYS created, with 9183 rows and 2 columns.

MPRINT(SIMPLECONTINUOUS):   create table s.enrollment(label = "Enrollment information for the MRNs in main") as select mrn , 
sum(days) as CoveredDays 
label = "Number of enrolled days between 01jan2007 and 31Dec2008" , (sum(days) = 731) as ContinuouslyEnrolled label = "0/1 flag 
answering was this 
person continuously enrolled from 01jan2007 to 31Dec2008 (disregarding gaps up to 90 days)?" from _period_days group by mrn ;
NOTE: Table S.ENROLLMENT created, with 9144 rows and 3 columns.

MPRINT(SIMPLECONTINUOUS):   insert into s.enrollment (MRN, CoveredDays, ContinuouslyEnrolled) select MRN, 0, 0 from _ids where mrn 
not in (select mrn 
from _period_days) ;
NOTE: 141 rows were inserted into S.ENROLLMENT.

MPRINT(SIMPLECONTINUOUS):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.46 seconds
      cpu time            0.15 seconds
      

MLOGIC(SIMPLECONTINUOUS):  Ending execution.
4691  run;
4692  
4693  %GetFollowUpTime(People       = main
MLOGIC(GETFOLLOWUPTIME):  Beginning execution.
4694                 , IndexDate    = "&my_start_date"d
4695                 , EndDate      = "&my_end_date"d
4696                 , GapTolerance = 90
4697                 , CallEndDateVar = disenroll_date
4698                 , OutSet       = s.disenrollment
4699                 , DebugOut     = work
4700                   ) ;
MLOGIC(GETFOLLOWUPTIME):  Parameter PEOPLE has value main
MLOGIC(GETFOLLOWUPTIME):  Parameter INDEXDATE has value "01jan2007"d
MLOGIC(GETFOLLOWUPTIME):  Parameter ENDDATE has value "31Dec2008"d
MLOGIC(GETFOLLOWUPTIME):  Parameter GAPTOLERANCE has value 90
10                                                         The SAS System                               19:48 Friday, April 16, 2010

MLOGIC(GETFOLLOWUPTIME):  Parameter CALLENDDATEVAR has value disenroll_date
MLOGIC(GETFOLLOWUPTIME):  Parameter OUTSET has value s.disenrollment
MLOGIC(GETFOLLOWUPTIME):  Parameter DEBUGOUT has value work
MLOGIC(GETFOLLOWUPTIME):  Parameter ENROLLDSET has value __enroll.&_EnrollData
MLOGIC(GETFOLLOWUPTIME):  Parameter REVERSE has value 0
MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT ==============================================================
==============================================================
MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT Macro GetFollowUpTime V0.91 (REVISED for Reverse look by JW):
Macro GetFollowUpTime V0.91 (REVISED for Reverse look by JW):
MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT Creating a dset "&OutSet", which will look just like "&People" except
Creating a dset "s.disenrollment", which will look just like "main" except
MLOGIC(GETFOLLOWUPTIME):  %PUT that it will have an additional variable "&CallEndDateVar", which will
that it will have an additional variable "disenroll_date", which will
MLOGIC(GETFOLLOWUPTIME):  %PUT hold the earliest of date-of-last-enrollment, or &EndDate (or, if the
hold the earliest of date-of-last-enrollment, or "31Dec2008"d (or, if the
MLOGIC(GETFOLLOWUPTIME):  %PUT person was not enrolled at all a missing value).
person was not enrolled at all a missing value).
MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT THIS IS BETA SOFTWARE-PLEASE SCRUTINIZE THE RESULTS AND REPORT PROBLEMS
THIS IS BETA SOFTWARE-PLEASE SCRUTINIZE THE RESULTS AND REPORT PROBLEMS
MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT ==============================================================
==============================================================
MLOGIC(GETFOLLOWUPTIME):  %PUT 

MLOGIC(GETFOLLOWUPTIME):  %PUT 

MPRINT(GETFOLLOWUPTIME):   libname __enroll "\\ctrhs-sas\warehouse\sasdata\crn_vdw" access = readonly ;
NOTE: Libname __ENROLL refers to the same physical library as __VDW.
NOTE: Libref __ENROLL was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: \\ctrhs-sas\warehouse\SasData\CRN_VDW
MPRINT(GETFOLLOWUPTIME):   proc sql noprint ;
MLOGIC(GETFOLLOWUPTIME):  %IF condition &Reverse.=1 is FALSE
MLOGIC(GETFOLLOWUPTIME):  %IF condition &Reverse.=1 is FALSE
MPRINT(GETFOLLOWUPTIME):   create table work.__enroll as select p.mrn , e.enr_start , e.enr_end , "01jan2007"d as idate format = 
mmddyy10. , 
"31Dec2008"d as edate format = mmddyy10. from main as p INNER JOIN __enroll.enroll2 as e on p.MRN = e.MRN where intnx('day', 
"01jan2007"d, -90, 
'sameday') <= e.enr_end AND intnx('day', "31Dec2008"d , 90, 'sameday') >= e.enr_start order by mrn, enr_start ;
NOTE: SAS threaded sort was used.
NOTE: Table WORK.__ENROLL created, with 15811 rows and 5 columns.

11                                                         The SAS System                               19:48 Friday, April 16, 2010

MPRINT(GETFOLLOWUPTIME):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           34.43 seconds
      cpu time            4.76 seconds
      

MPRINT(GETFOLLOWUPTIME):   *** Collapse contiguous periods down. ;
MLOGIC(COLLAPSEPERIODS):  Beginning execution.
MLOGIC(COLLAPSEPERIODS):  Parameter LIB has value work
MLOGIC(COLLAPSEPERIODS):  Parameter DSET has value __enroll
MLOGIC(COLLAPSEPERIODS):  Parameter RECSTART has value enr_start
MLOGIC(COLLAPSEPERIODS):  Parameter RECEND has value enr_end
MLOGIC(COLLAPSEPERIODS):  Parameter PERSONID has value MRN
MLOGIC(COLLAPSEPERIODS):  Parameter DAYSTOL has value 90
MLOGIC(COLLAPSEPERIODS):  Parameter DEBUG has value 0
MLOGIC(GETVARLIST):  Beginning execution.
MLOGIC(GETVARLIST):  Parameter DSET has value work.__enroll
MLOGIC(GETVARLIST):  Parameter RECSTART has value enr_start
MLOGIC(GETVARLIST):  Parameter RECEND has value enr_end
MLOGIC(GETVARLIST):  Parameter PERSONID has value MRN
MLOGIC(GETVARLIST):  %GLOBAL  VARLIST 
MLOGIC(GETVARLIST):  %IF condition %index(&Dset, .) = 0 is FALSE
MPRINT(GETVARLIST):   ;
MPRINT(GETVARLIST):   proc sql noprint ;
MPRINT(GETVARLIST):   * describe table dictionary.columns ;
MPRINT(GETVARLIST):   select name into :VarList separated by ' ' from dictionary.columns where memtype ne 'VIEW' AND 
upcase(compress(libname || '.' 
|| memname)) = "WORK.__ENROLL" AND upcase(name) not in ("ENR_START", "ENR_END") ;
MPRINT(GETVARLIST):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           43.86 seconds
      cpu time            2.87 seconds
      

MLOGIC(GETVARLIST):  Ending execution.
MPRINT(COLLAPSEPERIODS):   ;
MLOGIC(COLLAPSEPERIODS):  %PUT VarList is &VarList
VarList is mrn idate edate
MLOGIC(COLLAPSEPERIODS):  %PUT Length of varlist is %length(&varlist)
Length of varlist is 15
MLOGIC(COLLAPSEPERIODS):  %IF condition %length(&varlist) = 0 is FALSE
MLOGIC(COLLAPSEPERIODS):  %LET (variable name is LASTVAR)
MLOGIC(LASTWORD):  Beginning execution.
MLOGIC(LASTWORD):  Parameter WORDLIST has value mrn idate edate
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  %DO %UNTIL(&ThisWord =) loop beginning.
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  %LET (variable name is THISWORD)
MLOGIC(LASTWORD):  %DO %UNTIL(&ThisWord =) condition is FALSE; loop will iterate again.
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  %LET (variable name is THISWORD)
MLOGIC(LASTWORD):  %DO %UNTIL(&ThisWord =) condition is FALSE; loop will iterate again.
MLOGIC(LASTWORD):  %LET (variable name is I)
12                                                         The SAS System                               19:48 Friday, April 16, 2010

MLOGIC(LASTWORD):  %LET (variable name is THISWORD)
MLOGIC(LASTWORD):  %DO %UNTIL(&ThisWord =) condition is FALSE; loop will iterate again.
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  %LET (variable name is THISWORD)
MLOGIC(LASTWORD):  %DO %UNTIL() condition is TRUE; loop will not iterate again.
MLOGIC(LASTWORD):  %LET (variable name is I)
MLOGIC(LASTWORD):  Ending execution.
MPRINT(COLLAPSEPERIODS):   proc sort nodupkey data = work.__enroll ;
MPRINT(COLLAPSEPERIODS):   by MRN enr_start mrn idate edate enr_end ;
MPRINT(COLLAPSEPERIODS):   run ;

NOTE: There were 15811 observations read from the data set WORK.__ENROLL.
NOTE: Duplicate BY variable(s) specified. Duplicates will be ignored.
NOTE: SAS sort was used.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.__ENROLL has 15811 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(COLLAPSEPERIODS):   data work.__enroll ;
MPRINT(COLLAPSEPERIODS):   retain PeriodStart PeriodEnd ;
MPRINT(COLLAPSEPERIODS):   format PeriodStart PeriodEnd mmddyy10. ;
MPRINT(COLLAPSEPERIODS):   set work.__enroll(rename = (enr_start = _enr_start enr_end = _enr_end)) ;
MPRINT(COLLAPSEPERIODS):   by MRN mrn idate edate NOTSORTED ;
MPRINT(COLLAPSEPERIODS):   if first.edate then do ;
MPRINT(COLLAPSEPERIODS):   * Start of a new period--initialize. ;
MPRINT(COLLAPSEPERIODS):   PeriodStart = _enr_start ;
MPRINT(COLLAPSEPERIODS):   PeriodEnd = _enr_end ;
MLOGIC(COLLAPSEPERIODS):  %IF condition &Debug = 1 is FALSE
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   * else do ;
MPRINT(COLLAPSEPERIODS):   * if (PeriodStart <= _&RecStart <= PeriodEnd + 1) then do ;
MPRINT(COLLAPSEPERIODS):   if (PeriodStart <= _enr_start <= (PeriodEnd + 90)) then do ;
MPRINT(COLLAPSEPERIODS):   * Extend the period end out to whichever is longer--the period or the record. ;
MPRINT(COLLAPSEPERIODS):   PeriodEnd = max(_enr_end, PeriodEnd) ;
MLOGIC(COLLAPSEPERIODS):  %IF condition &Debug = 1 is FALSE
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   else do ;
MPRINT(COLLAPSEPERIODS):   * We are in a new period--output the last rec & reinitialize. ;
MPRINT(COLLAPSEPERIODS):   output ;
MPRINT(COLLAPSEPERIODS):   PeriodStart = _enr_start ;
MPRINT(COLLAPSEPERIODS):   PeriodEnd = _enr_end ;
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   * end ;
MPRINT(COLLAPSEPERIODS):   if last.edate then do ;
MLOGIC(COLLAPSEPERIODS):  %IF condition &Debug = 1 is FALSE
MPRINT(COLLAPSEPERIODS):   output ;
MPRINT(COLLAPSEPERIODS):   end ;
MPRINT(COLLAPSEPERIODS):   run ;

NOTE: There were 15811 observations read from the data set WORK.__ENROLL.
13                                                         The SAS System                               19:48 Friday, April 16, 2010

NOTE: The data set WORK.__ENROLL has 9361 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(COLLAPSEPERIODS):   * Now we have the actual start/stop dates in PeriodStart & PeriodEnd--rename those to ;
MPRINT(COLLAPSEPERIODS):   * the original record start/stop variable names, and strip out any wacky recs where start comes after 
end ;
MPRINT(COLLAPSEPERIODS):   data work.__enroll ;
MPRINT(COLLAPSEPERIODS):   set work.__enroll(rename = (PeriodStart = enr_start PeriodEnd = enr_end)) ;
MPRINT(COLLAPSEPERIODS):   * if PeriodStart le PeriodEnd ;
MPRINT(COLLAPSEPERIODS):   drop _enr_start _enr_end ;
MPRINT(COLLAPSEPERIODS):   run ;

NOTE: There were 9361 observations read from the data set WORK.__ENROLL.
NOTE: The data set WORK.__ENROLL has 9361 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MLOGIC(COLLAPSEPERIODS):  Ending execution.
MPRINT(GETFOLLOWUPTIME):   ;
MPRINT(GETFOLLOWUPTIME):   ** Handle the (I would hope rare) case where someone is not enrolled on their index ;
MPRINT(GETFOLLOWUPTIME):   ** date, and the start of their enrollment is more than &GapTolerance days away. ;
MPRINT(GETFOLLOWUPTIME):   proc sql ;
MLOGIC(GETFOLLOWUPTIME):  %IF condition &Reverse.=1 is FALSE
MPRINT(GETFOLLOWUPTIME):   delete from work.__enroll where (enr_start - idate) gt 90 ;
NOTE: 74 rows were deleted from WORK.__ENROLL.

MPRINT(GETFOLLOWUPTIME):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(GETFOLLOWUPTIME):   ** The end of contiguous enrollment is enr_end on the rec w/the earliest enr_start ;
MPRINT(GETFOLLOWUPTIME):   proc sort data = work.__enroll out = work.__collapsed_enroll ;
MPRINT(GETFOLLOWUPTIME):   by mrn enr_start ;
MPRINT(GETFOLLOWUPTIME):   run ;

NOTE: There were 9287 observations read from the data set WORK.__ENROLL.
NOTE: SAS sort was used.
NOTE: The data set WORK.__COLLAPSED_ENROLL has 9287 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(GETFOLLOWUPTIME):   proc sort nodupkey data = work.__collapsed_enroll out = work.__first_periods ;
MPRINT(GETFOLLOWUPTIME):   by mrn ;
MPRINT(GETFOLLOWUPTIME):   run ;
14                                                         The SAS System                               19:48 Friday, April 16, 2010


NOTE: There were 9287 observations read from the data set WORK.__COLLAPSED_ENROLL.
NOTE: SAS sort was used.
NOTE: 2 observations with duplicate key values were deleted.
NOTE: The data set WORK.__FIRST_PERIODS has 9285 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      

MPRINT(GETFOLLOWUPTIME):   proc sql ;
MLOGIC(GETFOLLOWUPTIME):  %IF condition &Reverse.=1 is FALSE
MPRINT(GETFOLLOWUPTIME):   create table s.disenrollment as select p.* , min(e.edate, e.enr_end) as disenroll_date format = 
mmddyy10. from main as p 
LEFT JOIN work.__first_periods as e on p.mrn = e.mrn ;
NOTE: Table S.DISENROLLMENT created, with 9285 rows and 2 columns.

MPRINT(GETFOLLOWUPTIME):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.28 seconds
      cpu time            0.06 seconds
      

MLOGIC(GETFOLLOWUPTIME):  Ending execution.
4701  run;
4702  
4703  
4704  proc freq data = s.enrollment ;
4705    tables continuouslyenrolled / missing ;
4706  run ;

NOTE: There were 9285 observations read from the data set S.ENROLLMENT.
NOTE: The PROCEDURE FREQ printed page 1.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.34 seconds
      cpu time            0.15 seconds
      

4707  
4708  proc freq data = s.disenrollment ;
4709    tables disenroll_date / missing ;
4710  run ;

NOTE: There were 9285 observations read from the data set S.DISENROLLMENT.
NOTE: The PROCEDURE FREQ printed page 2.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      

4711  
4712  proc sql ;
4713    create table s.discreps as
15                                                         The SAS System                               19:48 Friday, April 16, 2010

4714    select mrn, 'passed gfut, but not sc' as reason
4715    from s.disenrollment
4716    where disenroll_date = "&my_end_date"d AND mrn not in (select mrn from s.enrollment where continuouslyenrolled = 1)
4717    ;
NOTE: Table S.DISCREPS created, with 0 rows and 2 columns.

4718  
4719    insert into s.discreps
4720    select e.mrn, 'passed sc, but not gfut' as reason
4721    from s.enrollment as e
4722    where e.continuouslyenrolled = 1 and mrn not in (select mrn from s.disenrollment where disenroll_date = "&my_end_date"d) ;
NOTE: 72 rows were inserted into S.DISCREPS.

4723  
4724    create table s.raw_enroll as
4725    select e.mrn, enr_start, enr_end
4726    from vdw.enroll2 as e INNER JOIN
4727        s.discreps as m
4728    on    e.mrn = m.mrn
4729    order by e.mrn, enr_start, enr_end
4730    ;
NOTE: SAS threaded sort was used.
NOTE: Table S.RAW_ENROLL created, with 573 rows and 3 columns.

4731  
4732  quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           28.07 seconds
      cpu time            5.03 seconds
      

4733  
4734  /*
4735  gfut is more liberal than sc--it lets in 2 more people.
4736  
4737  These people were both
4738  
4739  proc sql ;
4740    delete from main
4741    where mrn not in (select mrn from s.discreps)
4742    ;
4743  quit ;
4744  
4745  %SimpleContinuous(
4746                   People=main
4747                  , StartDt= 01Oct2006
4748                  , Enddt= 31Dec2008
4749                  , DaysTol = 90
4750                  , outset = s.discrep_enrollment
4751                  );
4752  
4753  proc freq data = s.discrep_enrollment ;
4754    tables continuouslyenrolled / missing ;
16                                                         The SAS System                               19:48 Friday, April 16, 2010

4755  run ;
4756  */
4757  
4758  
4759  /*
4760    Now we have a problem w/GFUT--its too generous.
4761      not enrolled on index & gap from index to first enrollment is too long.
4762  
4763  */
NOTE: Remote submit to CHSDWSAS complete.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           3:58.76
      cpu time            2.58 seconds
      
